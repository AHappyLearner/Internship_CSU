# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'sealfactory.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *

class Ui_SealFactory(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(417, 600)
        self.Form = MainWindow
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.treeWidget = QtWidgets.QTreeWidget(self.centralwidget)
        self.treeWidget.setGeometry(QtCore.QRect(20, 90, 371, 471))
        self.treeWidget.setObjectName("treeWidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(20, 20, 371, 65))
        self.widget.setObjectName("widget")
        self.gridLayout = QtWidgets.QGridLayout(self.widget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.lineEdit = QtWidgets.QLineEdit(self.widget)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout.addWidget(self.lineEdit, 0, 0, 1, 3)
        self.pb_query = QtWidgets.QPushButton(self.widget)
        self.pb_query.setObjectName("pb_query")
        self.gridLayout.addWidget(self.pb_query, 0, 3, 1, 1)
        self.pb_top = QtWidgets.QPushButton(self.widget)
        self.pb_top.setObjectName("pb_top")
        self.gridLayout.addWidget(self.pb_top, 0, 4, 1, 1)
        self.pb_pre = QtWidgets.QPushButton(self.widget)
        self.pb_pre.setObjectName("pb_pre")
        self.gridLayout.addWidget(self.pb_pre, 0, 5, 1, 1)
        self.pb_next = QtWidgets.QPushButton(self.widget)
        self.pb_next.setObjectName("pb_next")
        self.gridLayout.addWidget(self.pb_next, 0, 6, 1, 1)
        self.pb_bot = QtWidgets.QPushButton(self.widget)
        self.pb_bot.setObjectName("pb_bot")
        self.gridLayout.addWidget(self.pb_bot, 0, 7, 1, 1)
        self.pb_add = QtWidgets.QPushButton(self.widget)
        self.pb_add.setObjectName("pb_add")
        self.gridLayout.addWidget(self.pb_add, 1, 0, 1, 1)
        self.pb_del = QtWidgets.QPushButton(self.widget)
        self.pb_del.setObjectName("pb_del")
        self.gridLayout.addWidget(self.pb_del, 1, 1, 1, 1)
        self.pb_change = QtWidgets.QPushButton(self.widget)
        self.pb_change.setObjectName("pb_change")
        self.gridLayout.addWidget(self.pb_change, 1, 2, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 417, 25))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.pb_add.clicked.connect(self.addNode)
        self.pb_change.clicked.connect(self.updateNode)
        self.pb_del.clicked.connect(self.deleteNode)
        self.pb_pre.clicked.connect(self.preNode)
        self.pb_next.clicked.connect(self.nextNode)
        self.pb_query.clicked.connect(self.search)
        self.pb_bot.clicked.connect(lambda: self.treeWidget.setCurrentItem(self.items_list[-1]))
        self.pb_top.clicked.connect(lambda: self.treeWidget.setCurrentItem(self.items_list[0]))
        self.retranslateUi(MainWindow)
        self.cursor=self.data.cursor
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.show_tree()
        self.search()
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pb_query.setText(_translate("MainWindow", "|-|"))
        self.pb_top.setText(_translate("MainWindow", "|<"))
        self.pb_pre.setText(_translate("MainWindow", "<"))
        self.pb_next.setText(_translate("MainWindow", ">"))
        self.pb_bot.setText(_translate("MainWindow", ">|"))
        self.pb_add.setText(_translate("MainWindow", "+"))
        self.pb_del.setText(_translate("MainWindow", "-"))
        self.pb_change.setText(_translate("MainWindow", "*"))
        self.treeWidget.setHeaderHidden(True)
    def show_tree(self):
        self.cursor.execute("select * from sealfactory order by parent desc")
        result=self.cursor.fetchall()
        for row in result:
            if row[1]==None:
                self.root = QTreeWidgetItem(self.treeWidget)
                self.root.setText(0, row[0])
            else:
                self.item = self.treeWidget.findItems(row[1],
                                                            (QtCore.Qt.MatchContains | QtCore.Qt.MatchRecursive),
                                                            0)
                print(len(self.item))
                self.child=QTreeWidgetItem(self.item[0])
                self.child.setText(0,row[0])
    def addNode(self):
        try:
            item = self.treeWidget.currentItem()
            if item == None:
                item = self.treeWidget.invisibleRootItem()
            nameDialog = QInputDialog()
            text, ok = nameDialog.getText(self.Form, 'Text Input Dialog', '输入厂家名称：')
            ParentName = item.text(0)
            ChildName = text
            sql = "insert into sealfactory values(" + repr(ChildName) + "," + repr(ParentName) + ')'
            self.cursor.execute(sql)
            self.data.conn.commit()
            node = QTreeWidgetItem(item)
            if ok:
                node.setText(0, text)

        except:
            QtWidgets.QMessageBox.information(self.Form, 'Message',
                                              "添加失败!该节点已存在！")
            return
        self.lineEdit.clear()

    def updateNode(self):

        try:
            item = self.treeWidget.currentItem()
            pretext = item.text(0)
            nameDialog = QInputDialog()
            text, ok = nameDialog.getText(self.Form, 'Text Input Dialog', '输入厂家名称：',
                                          QLineEdit.Normal, item.text(0))
            sql = "update sealfactory set child=" + repr(text) + " where child=" + repr(pretext)
            self.cursor.execute(sql)
            sql = "update sealfactory set parent=" + repr(text) + " where parent=" + repr(pretext)
            self.cursor.execute(sql)
            self.data.conn.commit()
            if ok:
                item.setText(0, text)
        except:
            QtWidgets.QMessageBox.information(self.Form, 'Message',
                                              "修改失败!")
            return
        self.lineEdit.clear()

    def deleteNode(self):
        item=self.treeWidget.currentItem()
        text=item.text(0)
        sql="delete from sealfactory where parent="+repr(text)
        self.cursor.execute(sql)
        sql="delete from sealfactory where child="+repr(text)
        self.cursor.execute(sql)
        self.data.conn.commit()
        for item in self.treeWidget.selectedItems():
            (item.parent() or self.treeWidget.invisibleRootItem()).removeChild(item)
    def preNode(self):
        """it = QTreeWidgetItemIterator(self.treeWidget)
        while it.value():
            print(it.value().text(0))
            #if it.text(0) == "itemText":
            #    *it.setSelected(True)
            it += 1"""

        selected = self.treeWidget.selectedItems()
        if len(selected)==0:
            self.treeWidget.setCurrentItem(self.lastItem())
            return
        item = selected[0]
        self.treeWidget.setCurrentItem(self.treeWidget.itemAbove(item))
        selected = self.treeWidget.selectedItems()

        while len(selected) != 0 and selected[0] not in self.items_list:
            item = selected[0]
            self.treeWidget.setCurrentItem(self.treeWidget.itemAbove(item))
            selected = self.treeWidget.selectedItems()

    def nextNode(self):
        """try:
            self.treeWidget.setCurrentItem(next(self.items_iter))
        except StopIteration:
            selected = self.treeWidget.selectedItems()
            item = selected[0]
            self.treeWidget.setCurrentItem(self.treeWidget.itemBelow(item))
            self.items_iter = iter(self.items_list)"""

        selected = self.treeWidget.selectedItems()
        if len(selected) == 0:
            self.treeWidget.setCurrentItem(self.items_list[0])
            return
        item = selected[0]
        self.treeWidget.setCurrentItem(self.treeWidget.itemBelow(item))
        selected = self.treeWidget.selectedItems()

        while len(selected)!=0 and selected[0] not in self.items_list:
            item = selected[0]
            self.treeWidget.setCurrentItem(self.treeWidget.itemBelow(item))
            selected = self.treeWidget.selectedItems()


    def search(self):
        text = self.lineEdit.text()
        items = QTreeWidgetItemIterator(self.treeWidget)
        self.items_list = self.treeWidget.findItems(text,
                        (QtCore.Qt.MatchContains | QtCore.Qt.MatchRecursive),
                        0)
        print(self.items_list)
        #self.items_iter = iter(self.items_list)
        if len(text) == 0:
            while items.value():
                item = items.value()
                item.setHidden(False)
                items += 1
            return

        while items.value():
            item = items.value()
            if item in self.items_list:
                item.setHidden(False)
                try:
                    p = item.parent()
                    while p != self.treeWidget.invisibleRootItem():
                        p.setHidden(False)
                        p.setExpanded(True)
                        p = p.parent()
                except:
                    pass
            else:
                item.setHidden(True)
            items += 1

    def lastItem(self):
        """r = self.treeWidget.invisibleRootItem()
        while True:
            count = r.childCount()
            if count == 0:
                break
            c = r
            for i in range(count-1, -1):
                c = r.child(i)
                if c.isHidden()==False:
                    break
            print(c.text(0))
            if c.isExpanded()==False:
                break"""
        return self.items_list[-1]
    def innitial(self,data):
        self.data=data
if __name__ == "__main__":
    app = QApplication(sys.argv)
    handover = QMainWindow()
    ui_handover = Ui_SealFactory()
    ui_handover.setupUi(handover)
    handover.show()
    sys.exit(app.exec_())